

module AbsM where

-- Haskell module generated by the BNF converter




newtype ADD = ADD String deriving (Eq, Ord, Show, Read)
newtype SUB = SUB String deriving (Eq, Ord, Show, Read)
newtype MUL = MUL String deriving (Eq, Ord, Show, Read)
newtype DIV = DIV String deriving (Eq, Ord, Show, Read)
newtype ARROW = ARROW String deriving (Eq, Ord, Show, Read)
newtype AND = AND String deriving (Eq, Ord, Show, Read)
newtype OR = OR String deriving (Eq, Ord, Show, Read)
newtype NOT = NOT String deriving (Eq, Ord, Show, Read)
newtype EQUAL = EQUAL String deriving (Eq, Ord, Show, Read)
newtype LT = LT String deriving (Eq, Ord, Show, Read)
newtype GT = GT String deriving (Eq, Ord, Show, Read)
newtype LE = LE String deriving (Eq, Ord, Show, Read)
newtype GE = GE String deriving (Eq, Ord, Show, Read)
newtype ASSIGN = ASSIGN String deriving (Eq, Ord, Show, Read)
newtype LPAR = LPAR String deriving (Eq, Ord, Show, Read)
newtype RPAR = RPAR String deriving (Eq, Ord, Show, Read)
newtype CLPAR = CLPAR String deriving (Eq, Ord, Show, Read)
newtype CRPAR = CRPAR String deriving (Eq, Ord, Show, Read)
newtype SLPAR = SLPAR String deriving (Eq, Ord, Show, Read)
newtype SRPAR = SRPAR String deriving (Eq, Ord, Show, Read)
newtype SLASH = SLASH String deriving (Eq, Ord, Show, Read)
newtype COLON = COLON String deriving (Eq, Ord, Show, Read)
newtype SEMICOLON = SEMICOLON String deriving (Eq, Ord, Show, Read)
newtype COMMA = COMMA String deriving (Eq, Ord, Show, Read)
newtype IF = IF String deriving (Eq, Ord, Show, Read)
newtype THEN = THEN String deriving (Eq, Ord, Show, Read)
newtype WHILE = WHILE String deriving (Eq, Ord, Show, Read)
newtype DO = DO String deriving (Eq, Ord, Show, Read)
newtype READ = READ String deriving (Eq, Ord, Show, Read)
newtype ELSE = ELSE String deriving (Eq, Ord, Show, Read)
newtype BEGIN = BEGIN String deriving (Eq, Ord, Show, Read)
newtype END = END String deriving (Eq, Ord, Show, Read)
newtype CASE = CASE String deriving (Eq, Ord, Show, Read)
newtype OF = OF String deriving (Eq, Ord, Show, Read)
newtype PRINT = PRINT String deriving (Eq, Ord, Show, Read)
newtype INT = INT String deriving (Eq, Ord, Show, Read)
newtype BOOL = BOOL String deriving (Eq, Ord, Show, Read)
newtype CHAR = CHAR String deriving (Eq, Ord, Show, Read)
newtype REAL = REAL String deriving (Eq, Ord, Show, Read)
newtype VAR = VAR String deriving (Eq, Ord, Show, Read)
newtype DATA = DATA String deriving (Eq, Ord, Show, Read)
newtype SIZE = SIZE String deriving (Eq, Ord, Show, Read)
newtype FLOAT = FLOAT String deriving (Eq, Ord, Show, Read)
newtype FLOOR = FLOOR String deriving (Eq, Ord, Show, Read)
newtype CEIL = CEIL String deriving (Eq, Ord, Show, Read)
newtype FUN = FUN String deriving (Eq, Ord, Show, Read)
newtype RETURN = RETURN String deriving (Eq, Ord, Show, Read)
newtype CID = CID String deriving (Eq, Ord, Show, Read)
newtype ID = ID String deriving (Eq, Ord, Show, Read)
newtype IVAL = IVAL String deriving (Eq, Ord, Show, Read)
newtype RVAL = RVAL String deriving (Eq, Ord, Show, Read)
newtype BVAL = BVAL String deriving (Eq, Ord, Show, Read)
newtype CVAL = CVAL String deriving (Eq, Ord, Show, Read)
data Program = P1 Block
  deriving (Eq, Ord, Show, Read)

data Block = P2 Declarations Program_Body
  deriving (Eq, Ord, Show, Read)

data Declarations = P3 Declaration SEMICOLON Declarations | P4
  deriving (Eq, Ord, Show, Read)

data Declaration
    = P5 Var_Declaration | P6 Fun_Declaration | P7 Data_Declaration
  deriving (Eq, Ord, Show, Read)

data Var_Declaration = P8 VAR Var_Specs COLON Type
  deriving (Eq, Ord, Show, Read)

data Var_Specs = P9 Var_Spec More_Var_Specs
  deriving (Eq, Ord, Show, Read)

data More_Var_Specs = P10 COMMA Var_Spec More_Var_Specs | P11
  deriving (Eq, Ord, Show, Read)

data Var_Spec = P12 ID Array_Dimensions
  deriving (Eq, Ord, Show, Read)

data Array_Dimensions = P13 SLPAR Expr SRPAR Array_Dimensions | P14
  deriving (Eq, Ord, Show, Read)

data Type = P15 INT | P16 REAL | P17 BOOL | P18 CHAR | P19 ID
  deriving (Eq, Ord, Show, Read)

data Fun_Declaration
    = P20 FUN ID Param_List COLON Type CLPAR Fun_Block CRPAR
  deriving (Eq, Ord, Show, Read)

data Fun_Block = P21 Declarations Fun_Body
  deriving (Eq, Ord, Show, Read)

data Param_List = P22 LPAR Parameters RPAR
  deriving (Eq, Ord, Show, Read)

data Parameters = P23 Basic_Declaration More_Parameters | P24
  deriving (Eq, Ord, Show, Read)

data More_Parameters
    = P25 COMMA Basic_Declaration More_Parameters | P26
  deriving (Eq, Ord, Show, Read)

data Basic_Declaration = P27 ID Basic_Array_Dimensions COLON Type
  deriving (Eq, Ord, Show, Read)

data Basic_Array_Dimensions
    = P28 SLPAR SRPAR Basic_Array_Dimensions | P29
  deriving (Eq, Ord, Show, Read)

data Data_Declaration = P30 DATA ID EQUAL Cons_Declarations
  deriving (Eq, Ord, Show, Read)

data Cons_Declarations = P31 Cons_Decl More_Cons_Decl
  deriving (Eq, Ord, Show, Read)

data More_Cons_Decl = P32 SLASH Cons_Decl More_Cons_Decl | P33
  deriving (Eq, Ord, Show, Read)

data Cons_Decl = P34 CID OF Type_List | P35 CID
  deriving (Eq, Ord, Show, Read)

data Type_List = P36 Type More_Type
  deriving (Eq, Ord, Show, Read)

data More_Type = P37 MUL Type More_Type | P38
  deriving (Eq, Ord, Show, Read)

data Program_Body = P39 BEGIN Prog_Stmts END | P40 Prog_Stmts
  deriving (Eq, Ord, Show, Read)

data Fun_Body
    = P41 BEGIN Prog_Stmts RETURN Expr SEMICOLON END
    | P42 Prog_Stmts RETURN Expr SEMICOLON
  deriving (Eq, Ord, Show, Read)

data Prog_Stmts = P43 Prog_Stmt SEMICOLON Prog_Stmts | P44
  deriving (Eq, Ord, Show, Read)

data Prog_Stmt
    = P45 IF Expr THEN Prog_Stmt ELSE Prog_Stmt
    | P46 WHILE Expr DO Prog_Stmt
    | P47 READ Location
    | P48 Location ASSIGN Expr
    | P49 PRINT Expr
    | P50 CLPAR Block CRPAR
    | P51 CASE Expr OF CLPAR Case_List CRPAR
  deriving (Eq, Ord, Show, Read)

data Location = P52 ID Array_Dimensions
  deriving (Eq, Ord, Show, Read)

data Case_List = P53 Case More_Case
  deriving (Eq, Ord, Show, Read)

data More_Case = P54 SLASH Case More_Case | P55
  deriving (Eq, Ord, Show, Read)

data Case = P56 CID Var_List ARROW Prog_Stmt
  deriving (Eq, Ord, Show, Read)

data Var_List = P57 LPAR Var_List' RPAR | P58
  deriving (Eq, Ord, Show, Read)

data Var_List' = P59 ID More_Var_List'
  deriving (Eq, Ord, Show, Read)

data More_Var_List' = P60 COMMA ID More_Var_List' | P61
  deriving (Eq, Ord, Show, Read)

data Expr = P62 Expr OR BInt_Term | P63 BInt_Term
  deriving (Eq, Ord, Show, Read)

data BInt_Term = P64 BInt_Term AND BInt_Factor | P65 BInt_Factor
  deriving (Eq, Ord, Show, Read)

data BInt_Factor
    = P66 NOT BInt_Factor
    | P67 Int_Expr Compare_Op Int_Expr
    | P68 Int_Expr
  deriving (Eq, Ord, Show, Read)

data Compare_Op = P69 EQUAL | P70 LT | P71 GT | P72 LE | P73 GT
  deriving (Eq, Ord, Show, Read)

data Int_Expr = P74 Int_Expr Addop Int_Term | P75 Int_Term
  deriving (Eq, Ord, Show, Read)

data Addop = P76 ADD | P77 SUB
  deriving (Eq, Ord, Show, Read)

data Int_Term = P78 Int_Term Mulop Int_Factor | P79 Int_Factor
  deriving (Eq, Ord, Show, Read)

data Mulop = P80 MUL | P81 DIV
  deriving (Eq, Ord, Show, Read)

data Int_Factor
    = P82 LPAR Expr RPAR
    | P83 SIZE LPAR ID Basic_Array_Dimensions RPAR
    | P84 FLOAT LPAR Expr RPAR
    | P85 FLOOR LPAR Expr RPAR
    | P86 CEIL LPAR Expr RPAR
    | P87 ID Modifier_List
    | P88 CID Cons_Argument_List
    | P89 IVAL
    | P90 RVAL
    | P91 BVAL
    | P92 CVAL
    | P93 SUB Int_Factor
  deriving (Eq, Ord, Show, Read)

data Modifier_List = P94 Fun_Argument_List | P95 Array_Dimensions
  deriving (Eq, Ord, Show, Read)

data Fun_Argument_List = P96 LPAR Arguments RPAR
  deriving (Eq, Ord, Show, Read)

data Cons_Argument_List = P97 Fun_Argument_List | P98
  deriving (Eq, Ord, Show, Read)

data Arguments = P99 Expr More_Arguments | P100
  deriving (Eq, Ord, Show, Read)

data More_Arguments = P101 COMMA Expr More_Arguments | P102
  deriving (Eq, Ord, Show, Read)

