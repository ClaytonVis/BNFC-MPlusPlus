The Language m
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of m==

===Literals===






















































ADD literals are recognized by the regular expression
`````'+'`````

SUB literals are recognized by the regular expression
`````'-'`````

MUL literals are recognized by the regular expression
`````'*'`````

DIV literals are recognized by the regular expression
`````'/'`````

ARROW literals are recognized by the regular expression
`````{"=>"}`````

AND literals are recognized by the regular expression
`````{"&&"}`````

OR literals are recognized by the regular expression
`````{"||"}`````

NOT literals are recognized by the regular expression
`````{"not"}`````

EQUAL literals are recognized by the regular expression
`````'='`````

LT literals are recognized by the regular expression
`````'<'`````

GT literals are recognized by the regular expression
`````'>'`````

LE literals are recognized by the regular expression
`````{"=<"}`````

GE literals are recognized by the regular expression
`````{">="}`````

ASSIGN literals are recognized by the regular expression
`````{":="}`````

LPAR literals are recognized by the regular expression
`````'('`````

RPAR literals are recognized by the regular expression
`````')'`````

CLPAR literals are recognized by the regular expression
`````'{'`````

CRPAR literals are recognized by the regular expression
`````'}'`````

SLPAR literals are recognized by the regular expression
`````'['`````

SRPAR literals are recognized by the regular expression
`````']'`````

SLASH literals are recognized by the regular expression
`````'|'`````

COLON literals are recognized by the regular expression
`````':'`````

SEMICOLON literals are recognized by the regular expression
`````';'`````

COMMA literals are recognized by the regular expression
`````','`````

IF literals are recognized by the regular expression
`````{"if"}`````

THEN literals are recognized by the regular expression
`````{"then"}`````

WHILE literals are recognized by the regular expression
`````{"while"}`````

DO literals are recognized by the regular expression
`````{"do"}`````

READ literals are recognized by the regular expression
`````{"read"}`````

ELSE literals are recognized by the regular expression
`````{"else"}`````

BEGIN literals are recognized by the regular expression
`````{"begin"}`````

END literals are recognized by the regular expression
`````{"end"}`````

CASE literals are recognized by the regular expression
`````{"case"}`````

OF literals are recognized by the regular expression
`````{"of"}`````

PRINT literals are recognized by the regular expression
`````{"print"}`````

INT literals are recognized by the regular expression
`````{"int"}`````

BOOL literals are recognized by the regular expression
`````{"bool"}`````

CHAR literals are recognized by the regular expression
`````{"char"}`````

REAL literals are recognized by the regular expression
`````{"real"}`````

VAR literals are recognized by the regular expression
`````{"var"}`````

DATA literals are recognized by the regular expression
`````{"data"}`````

SIZE literals are recognized by the regular expression
`````{"size"}`````

FLOAT literals are recognized by the regular expression
`````{"float"}`````

FLOOR literals are recognized by the regular expression
`````{"floor"}`````

CEIL literals are recognized by the regular expression
`````{"ceil"}`````

FUN literals are recognized by the regular expression
`````{"fun"}`````

RETURN literals are recognized by the regular expression
`````{"return"}`````

CID literals are recognized by the regular expression
`````'#' ('_' | letter | digit)*`````

ID literals are recognized by the regular expression
`````letter ('_' | letter | digit)*`````

IVAL literals are recognized by the regular expression
`````digit+`````

RVAL literals are recognized by the regular expression
`````digit+ '.' digit+`````

BVAL literals are recognized by the regular expression
`````{"true"} | {"false"}`````

CVAL literals are recognized by the regular expression
`````'"' {"
"} '"' | '"' {"	"} '"' | '"' upper (letter | digit | '_') '"'`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in m are the following:

There are no reserved words in m.


There are no symbols in m.

===Comments===
Single-line comments begin with %.Multiple-line comments are  enclosed with /* and */.

==The syntactic structure of m==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //Program// | -> | //Block// 
  | //Block// | -> | //Declarations// //Program_Body// 
  | //Declarations// | -> | //Declaration// //SEMICOLON// //Declarations// 
  |  |  **|**  | **eps**
  | //Declaration// | -> | //Var_Declaration// 
  |  |  **|**  | //Fun_Declaration// 
  |  |  **|**  | //Data_Declaration// 
  | //Var_Declaration// | -> | //VAR// //Var_Specs// //COLON// //Type// 
  | //Var_Specs// | -> | //Var_Spec// //More_Var_Specs// 
  | //More_Var_Specs// | -> | //COMMA// //Var_Spec// //More_Var_Specs// 
  |  |  **|**  | **eps**
  | //Var_Spec// | -> | //ID// //Array_Dimensions// 
  | //Array_Dimensions// | -> | //SLPAR// //Expr// //SRPAR// //Array_Dimensions// 
  |  |  **|**  | **eps**
  | //Type// | -> | //INT// 
  |  |  **|**  | //REAL// 
  |  |  **|**  | //BOOL// 
  |  |  **|**  | //CHAR// 
  |  |  **|**  | //ID// 
  | //Fun_Declaration// | -> | //FUN// //ID// //Param_List// //COLON// //Type// //CLPAR// //Fun_Block// //CRPAR// 
  | //Fun_Block// | -> | //Declarations// //Fun_Body// 
  | //Param_List// | -> | //LPAR// //Parameters// //RPAR// 
  | //Parameters// | -> | //Basic_Declaration// //More_Parameters// 
  |  |  **|**  | **eps**
  | //More_Parameters// | -> | //COMMA// //Basic_Declaration// //More_Parameters// 
  |  |  **|**  | **eps**
  | //Basic_Declaration// | -> | //ID// //Basic_Array_Dimensions// //COLON// //Type// 
  | //Basic_Array_Dimensions// | -> | //SLPAR// //SRPAR// //Basic_Array_Dimensions// 
  |  |  **|**  | **eps**
  | //Data_Declaration// | -> | //DATA// //ID// //EQUAL// //Cons_Declarations// 
  | //Cons_Declarations// | -> | //Cons_Decl// //More_Cons_Decl// 
  | //More_Cons_Decl// | -> | //SLASH// //Cons_Decl// //More_Cons_Decl// 
  |  |  **|**  | **eps**
  | //Cons_Decl// | -> | //CID// //OF// //Type_List// 
  |  |  **|**  | //CID// 
  | //Type_List// | -> | //Type// //More_Type// 
  | //More_Type// | -> | //MUL// //Type// //More_Type// 
  |  |  **|**  | **eps**
  | //Program_Body// | -> | //BEGIN// //Prog_Stmts// //END// 
  |  |  **|**  | //Prog_Stmts// 
  | //Fun_Body// | -> | //BEGIN// //Prog_Stmts// //RETURN// //Expr// //SEMICOLON// //END// 
  |  |  **|**  | //Prog_Stmts// //RETURN// //Expr// //SEMICOLON// 
  | //Prog_Stmts// | -> | //Prog_Stmt// //SEMICOLON// //Prog_Stmts// 
  |  |  **|**  | **eps**
  | //Prog_Stmt// | -> | //IF// //Expr// //THEN// //Prog_Stmt// //ELSE// //Prog_Stmt// 
  |  |  **|**  | //WHILE// //Expr// //DO// //Prog_Stmt// 
  |  |  **|**  | //READ// //Location// 
  |  |  **|**  | //Location// //ASSIGN// //Expr// 
  |  |  **|**  | //PRINT// //Expr// 
  |  |  **|**  | //CLPAR// //Block// //CRPAR// 
  |  |  **|**  | //CASE// //Expr// //OF// //CLPAR// //Case_List// //CRPAR// 
  | //Location// | -> | //ID// //Array_Dimensions// 
  | //Case_List// | -> | //Case// //More_Case// 
  | //More_Case// | -> | //SLASH// //Case// //More_Case// 
  |  |  **|**  | **eps**
  | //Case// | -> | //CID// //Var_List// //ARROW// //Prog_Stmt// 
  | //Var_List// | -> | //LPAR// //Var_List'// //RPAR// 
  |  |  **|**  | **eps**
  | //Var_List'// | -> | //ID// //More_Var_List'// 
  | //More_Var_List'// | -> | //COMMA// //ID// //More_Var_List'// 
  |  |  **|**  | **eps**
  | //Expr// | -> | //Expr// //OR// //BInt_Term// 
  |  |  **|**  | //BInt_Term// 
  | //BInt_Term// | -> | //BInt_Term// //AND// //BInt_Factor// 
  |  |  **|**  | //BInt_Factor// 
  | //BInt_Factor// | -> | //NOT// //BInt_Factor// 
  |  |  **|**  | //Int_Expr// //Compare_Op// //Int_Expr// 
  |  |  **|**  | //Int_Expr// 
  | //Compare_Op// | -> | //EQUAL// 
  |  |  **|**  | //LT// 
  |  |  **|**  | //GT// 
  |  |  **|**  | //LE// 
  |  |  **|**  | //GT// 
  | //Int_Expr// | -> | //Int_Expr// //Addop// //Int_Term// 
  |  |  **|**  | //Int_Term// 
  | //Addop// | -> | //ADD// 
  |  |  **|**  | //SUB// 
  | //Int_Term// | -> | //Int_Term// //Mulop// //Int_Factor// 
  |  |  **|**  | //Int_Factor// 
  | //Mulop// | -> | //MUL// 
  |  |  **|**  | //DIV// 
  | //Int_Factor// | -> | //LPAR// //Expr// //RPAR// 
  |  |  **|**  | //SIZE// //LPAR// //ID// //Basic_Array_Dimensions// //RPAR// 
  |  |  **|**  | //FLOAT// //LPAR// //Expr// //RPAR// 
  |  |  **|**  | //FLOOR// //LPAR// //Expr// //RPAR// 
  |  |  **|**  | //CEIL// //LPAR// //Expr// //RPAR// 
  |  |  **|**  | //ID// //Modifier_List// 
  |  |  **|**  | //CID// //Cons_Argument_List// 
  |  |  **|**  | //IVAL// 
  |  |  **|**  | //RVAL// 
  |  |  **|**  | //BVAL// 
  |  |  **|**  | //CVAL// 
  |  |  **|**  | //SUB// //Int_Factor// 
  | //Modifier_List// | -> | //Fun_Argument_List// 
  |  |  **|**  | //Array_Dimensions// 
  | //Fun_Argument_List// | -> | //LPAR// //Arguments// //RPAR// 
  | //Cons_Argument_List// | -> | //Fun_Argument_List// 
  |  |  **|**  | **eps**
  | //Arguments// | -> | //Expr// //More_Arguments// 
  |  |  **|**  | **eps**
  | //More_Arguments// | -> | //COMMA// //Expr// //More_Arguments// 
  |  |  **|**  | **eps**


