module SkelM where

-- Haskell module generated by the BNF converter

import AbsM
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transADD :: ADD -> Result
transADD x = case x of
  ADD string -> failure x
transSUB :: SUB -> Result
transSUB x = case x of
  SUB string -> failure x
transMUL :: MUL -> Result
transMUL x = case x of
  MUL string -> failure x
transDIV :: DIV -> Result
transDIV x = case x of
  DIV string -> failure x
transARROW :: ARROW -> Result
transARROW x = case x of
  ARROW string -> failure x
transAND :: AND -> Result
transAND x = case x of
  AND string -> failure x
transOR :: OR -> Result
transOR x = case x of
  OR string -> failure x
transNOT :: NOT -> Result
transNOT x = case x of
  NOT string -> failure x
transEQUAL :: EQUAL -> Result
transEQUAL x = case x of
  EQUAL string -> failure x
transLT :: LT -> Result
transLT x = case x of
  LT string -> failure x
transGT :: GT -> Result
transGT x = case x of
  GT string -> failure x
transLE :: LE -> Result
transLE x = case x of
  LE string -> failure x
transGE :: GE -> Result
transGE x = case x of
  GE string -> failure x
transASSIGN :: ASSIGN -> Result
transASSIGN x = case x of
  ASSIGN string -> failure x
transLPAR :: LPAR -> Result
transLPAR x = case x of
  LPAR string -> failure x
transRPAR :: RPAR -> Result
transRPAR x = case x of
  RPAR string -> failure x
transCLPAR :: CLPAR -> Result
transCLPAR x = case x of
  CLPAR string -> failure x
transCRPAR :: CRPAR -> Result
transCRPAR x = case x of
  CRPAR string -> failure x
transSLPAR :: SLPAR -> Result
transSLPAR x = case x of
  SLPAR string -> failure x
transSRPAR :: SRPAR -> Result
transSRPAR x = case x of
  SRPAR string -> failure x
transSLASH :: SLASH -> Result
transSLASH x = case x of
  SLASH string -> failure x
transCOLON :: COLON -> Result
transCOLON x = case x of
  COLON string -> failure x
transSEMICOLON :: SEMICOLON -> Result
transSEMICOLON x = case x of
  SEMICOLON string -> failure x
transCOMMA :: COMMA -> Result
transCOMMA x = case x of
  COMMA string -> failure x
transIF :: IF -> Result
transIF x = case x of
  IF string -> failure x
transTHEN :: THEN -> Result
transTHEN x = case x of
  THEN string -> failure x
transWHILE :: WHILE -> Result
transWHILE x = case x of
  WHILE string -> failure x
transDO :: DO -> Result
transDO x = case x of
  DO string -> failure x
transREAD :: READ -> Result
transREAD x = case x of
  READ string -> failure x
transELSE :: ELSE -> Result
transELSE x = case x of
  ELSE string -> failure x
transBEGIN :: BEGIN -> Result
transBEGIN x = case x of
  BEGIN string -> failure x
transEND :: END -> Result
transEND x = case x of
  END string -> failure x
transCASE :: CASE -> Result
transCASE x = case x of
  CASE string -> failure x
transOF :: OF -> Result
transOF x = case x of
  OF string -> failure x
transPRINT :: PRINT -> Result
transPRINT x = case x of
  PRINT string -> failure x
transINT :: INT -> Result
transINT x = case x of
  INT string -> failure x
transBOOL :: BOOL -> Result
transBOOL x = case x of
  BOOL string -> failure x
transCHAR :: CHAR -> Result
transCHAR x = case x of
  CHAR string -> failure x
transREAL :: REAL -> Result
transREAL x = case x of
  REAL string -> failure x
transVAR :: VAR -> Result
transVAR x = case x of
  VAR string -> failure x
transDATA :: DATA -> Result
transDATA x = case x of
  DATA string -> failure x
transSIZE :: SIZE -> Result
transSIZE x = case x of
  SIZE string -> failure x
transFLOAT :: FLOAT -> Result
transFLOAT x = case x of
  FLOAT string -> failure x
transFLOOR :: FLOOR -> Result
transFLOOR x = case x of
  FLOOR string -> failure x
transCEIL :: CEIL -> Result
transCEIL x = case x of
  CEIL string -> failure x
transFUN :: FUN -> Result
transFUN x = case x of
  FUN string -> failure x
transRETURN :: RETURN -> Result
transRETURN x = case x of
  RETURN string -> failure x
transCID :: CID -> Result
transCID x = case x of
  CID string -> failure x
transID :: ID -> Result
transID x = case x of
  ID string -> failure x
transIVAL :: IVAL -> Result
transIVAL x = case x of
  IVAL string -> failure x
transRVAL :: RVAL -> Result
transRVAL x = case x of
  RVAL string -> failure x
transBVAL :: BVAL -> Result
transBVAL x = case x of
  BVAL string -> failure x
transCVAL :: CVAL -> Result
transCVAL x = case x of
  CVAL string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  P1 block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  P2 declarations programbody -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  P3 declaration semicolon declarations -> failure x
  P4 -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  P5 vardeclaration -> failure x
  P6 fundeclaration -> failure x
  P7 datadeclaration -> failure x
transVar_Declaration :: Var_Declaration -> Result
transVar_Declaration x = case x of
  P8 var varspecs colon type_ -> failure x
transVar_Specs :: Var_Specs -> Result
transVar_Specs x = case x of
  P9 varspec morevarspecs -> failure x
transMore_Var_Specs :: More_Var_Specs -> Result
transMore_Var_Specs x = case x of
  P10 comma varspec morevarspecs -> failure x
  P11 -> failure x
transVar_Spec :: Var_Spec -> Result
transVar_Spec x = case x of
  P12 id arraydimensions -> failure x
transArray_Dimensions :: Array_Dimensions -> Result
transArray_Dimensions x = case x of
  P13 slpar expr srpar arraydimensions -> failure x
  P14 -> failure x
transType :: Type -> Result
transType x = case x of
  P15 int -> failure x
  P16 real -> failure x
  P17 bool -> failure x
  P18 char -> failure x
  P19 id -> failure x
transFun_Declaration :: Fun_Declaration -> Result
transFun_Declaration x = case x of
  P20 fun id paramlist colon type_ clpar funblock crpar -> failure x
transFun_Block :: Fun_Block -> Result
transFun_Block x = case x of
  P21 declarations funbody -> failure x
transParam_List :: Param_List -> Result
transParam_List x = case x of
  P22 lpar parameters rpar -> failure x
transParameters :: Parameters -> Result
transParameters x = case x of
  P23 basicdeclaration moreparameters -> failure x
  P24 -> failure x
transMore_Parameters :: More_Parameters -> Result
transMore_Parameters x = case x of
  P25 comma basicdeclaration moreparameters -> failure x
  P26 -> failure x
transBasic_Declaration :: Basic_Declaration -> Result
transBasic_Declaration x = case x of
  P27 id basicarraydimensions colon type_ -> failure x
transBasic_Array_Dimensions :: Basic_Array_Dimensions -> Result
transBasic_Array_Dimensions x = case x of
  P28 slpar srpar basicarraydimensions -> failure x
  P29 -> failure x
transData_Declaration :: Data_Declaration -> Result
transData_Declaration x = case x of
  P30 data_ id equal consdeclarations -> failure x
transCons_Declarations :: Cons_Declarations -> Result
transCons_Declarations x = case x of
  P31 consdecl moreconsdecl -> failure x
transMore_Cons_Decl :: More_Cons_Decl -> Result
transMore_Cons_Decl x = case x of
  P32 slash consdecl moreconsdecl -> failure x
  P33 -> failure x
transCons_Decl :: Cons_Decl -> Result
transCons_Decl x = case x of
  P34 cid of_ typelist -> failure x
  P35 cid -> failure x
transType_List :: Type_List -> Result
transType_List x = case x of
  P36 type_ moretype -> failure x
transMore_Type :: More_Type -> Result
transMore_Type x = case x of
  P37 mul type_ moretype -> failure x
  P38 -> failure x
transProgram_Body :: Program_Body -> Result
transProgram_Body x = case x of
  P39 begin progstmts end -> failure x
  P40 progstmts -> failure x
transFun_Body :: Fun_Body -> Result
transFun_Body x = case x of
  P41 begin progstmts return expr semicolon end -> failure x
  P42 progstmts return expr semicolon -> failure x
transProg_Stmts :: Prog_Stmts -> Result
transProg_Stmts x = case x of
  P43 progstmt semicolon progstmts -> failure x
  P44 -> failure x
transProg_Stmt :: Prog_Stmt -> Result
transProg_Stmt x = case x of
  P45 if_ expr then_ progstmt1 else_ progstmt2 -> failure x
  P46 while expr do_ progstmt -> failure x
  P47 read location -> failure x
  P48 location assign expr -> failure x
  P49 print expr -> failure x
  P50 clpar block crpar -> failure x
  P51 case_ expr of_ clpar caselist crpar -> failure x
transLocation :: Location -> Result
transLocation x = case x of
  P52 id arraydimensions -> failure x
transCase_List :: Case_List -> Result
transCase_List x = case x of
  P53 case_ morecase -> failure x
transMore_Case :: More_Case -> Result
transMore_Case x = case x of
  P54 slash case_ morecase -> failure x
  P55 -> failure x
transCase :: Case -> Result
transCase x = case x of
  P56 cid varlist arrow progstmt -> failure x
transVar_List :: Var_List -> Result
transVar_List x = case x of
  P57 lpar varlist rpar -> failure x
  P58 -> failure x
transVar_List' :: Var_List' -> Result
transVar_List' x = case x of
  P59 id morevarlist -> failure x
transMore_Var_List' :: More_Var_List' -> Result
transMore_Var_List' x = case x of
  P60 comma id morevarlist -> failure x
  P61 -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  P62 expr or bintterm -> failure x
  P63 bintterm -> failure x
transBInt_Term :: BInt_Term -> Result
transBInt_Term x = case x of
  P64 bintterm and bintfactor -> failure x
  P65 bintfactor -> failure x
transBInt_Factor :: BInt_Factor -> Result
transBInt_Factor x = case x of
  P66 not bintfactor -> failure x
  P67 intexpr1 compareop intexpr2 -> failure x
  P68 intexpr -> failure x
transCompare_Op :: Compare_Op -> Result
transCompare_Op x = case x of
  P69 equal -> failure x
  P70 lt -> failure x
  P71 gt -> failure x
  P72 le -> failure x
  P73 gt -> failure x
transInt_Expr :: Int_Expr -> Result
transInt_Expr x = case x of
  P74 intexpr addop intterm -> failure x
  P75 intterm -> failure x
transAddop :: Addop -> Result
transAddop x = case x of
  P76 add -> failure x
  P77 sub -> failure x
transInt_Term :: Int_Term -> Result
transInt_Term x = case x of
  P78 intterm mulop intfactor -> failure x
  P79 intfactor -> failure x
transMulop :: Mulop -> Result
transMulop x = case x of
  P80 mul -> failure x
  P81 div -> failure x
transInt_Factor :: Int_Factor -> Result
transInt_Factor x = case x of
  P82 lpar expr rpar -> failure x
  P83 size lpar id basicarraydimensions rpar -> failure x
  P84 float lpar expr rpar -> failure x
  P85 floor lpar expr rpar -> failure x
  P86 ceil lpar expr rpar -> failure x
  P87 id modifierlist -> failure x
  P88 cid consargumentlist -> failure x
  P89 ival -> failure x
  P90 rval -> failure x
  P91 bval -> failure x
  P92 cval -> failure x
  P93 sub intfactor -> failure x
transModifier_List :: Modifier_List -> Result
transModifier_List x = case x of
  P94 funargumentlist -> failure x
  P95 arraydimensions -> failure x
transFun_Argument_List :: Fun_Argument_List -> Result
transFun_Argument_List x = case x of
  P96 lpar arguments rpar -> failure x
transCons_Argument_List :: Cons_Argument_List -> Result
transCons_Argument_List x = case x of
  P97 funargumentlist -> failure x
  P98 -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  P99 expr morearguments -> failure x
  P100 -> failure x
transMore_Arguments :: More_Arguments -> Result
transMore_Arguments x = case x of
  P101 comma expr morearguments -> failure x
  P102 -> failure x

